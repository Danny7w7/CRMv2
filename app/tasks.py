import telnyx

from celery import shared_task
from datetime import datetime
from celery.utils.log import get_task_logger

from app.models import *
from app.views.consents import getCompanyPerAgent
from app.views.sms import sendIndividualsSms, comprobate_company
from django.conf import settings

logger = get_task_logger(__name__)

@shared_task
def my_daily_task():

    print('Se ejecuto la tarea')

    now = datetime.now().date()

    print(f'Hora: {now}')

    # Filtramos los clientes que cumplen a√±os hoy, ignorando el a√±o
    birthdayClients = Clients.objects.filter(
        date_birth__month=now.month,
        date_birth__day=now.day
    )

    print(f'Clientes: {birthdayClients}')

    for clientBlue in birthdayClients:
        lines = clientBlue.agent_usa.split("\n")
        agentFirstName = lines[0].split()[0] 
        
        clientSms = Clients.objects.filter(phone_number=clientBlue.phone_number).first()

        if clientSms:

            print('Aqui entro al clientSms')
            chat = Chat.objects.select_related('agent').filter(contact_id=clientSms.id).first()
            telnyx.api_key = settings.TELNYX_API_KEY
            telnyx.Message.create(
                from_=f"+{chat.agent.assigned_phone.phone_number}",
                to=f'+{clientBlue.phone_number}',
                text= f'¬°Feliz cumplea√±os, {clientBlue.first_name} {clientBlue.last_name}! üéâ De parte de todo el equipo de {getCompanyPerAgent(agentFirstName)}, le deseamos un a√±o lleno de salud y bienestar. Recuerde que su agente de seguros, {clientBlue.agent_usa}, est√° siempre a su disposici√≥n para cualquier duda o apoyo con su p√≥liza. ¬°Que tenga un excelente d√≠a!'
            )
            # Log para verificar el env√≠o
            print(f"Mensaje enviado al numero {clientBlue.phone_number} - {clientBlue.first_name} {clientBlue.last_name}")
            logger.info(f"Mensaje enviado al numero {clientBlue.phone_number} - {clientBlue.first_name} {clientBlue.last_name}")
        else:
            print(f'Al cliente {clientBlue.first_name} {clientBlue.last_name} - {clientBlue.phone_number} No se le mando mensaje de cumplea√±o') 

@shared_task
def smsPayment():

    print(f'Se ejecuto el SmsPayment')

    now = datetime.now().date()
    
    smsPaymentClients = paymentDate.objects.select_related('obamacare__client', 'supp__client').filter(
        payment_date__month=now.month,
        payment_date__day=now.day,
    )

    print(f"Clientes encontrados: {smsPaymentClients.count()}")  # Verificar cu√°ntos clientes devuelve la consulta


    for clientBluePayment in smsPaymentClients:

        if clientBluePayment.obamacare or clientBluePayment.supp:
            selectedAgent = clientBluePayment.supp or clientBluePayment.obamacare

        if not selectedAgent:  # Si no hay agente, continuar con el siguiente cliente
            print(f"Cliente {clientBluePayment.id} no tiene agente asignado.")
            break

        lines = selectedAgent.agent_usa.split("\n")
        agentFirstName = lines[0].split()[0]

        clientSmsPayment = Clients.objects.filter(phone_number=selectedAgent.client.phone_number).first()
        obmaCliente = ObamaCare.objects.select_related('agent__assigned_phone').filter(client = clientSmsPayment.id).first()

        if clientSmsPayment:

            print('Aqui andamos ******')

            company = selectedAgent.client.company  # Obt√©n la empresa asociada al cliente

            if not comprobate_company(company):

                print('Aqui cxcxzczxczczcandamos ******')

                message = f'''Buen d√≠a {clientSmsPayment.first_name} {clientSmsPayment.last_name} 
                Nos comunicamos  de {getCompanyPerAgent(agentFirstName)},  para recordarle que su pago mensual de {obmaCliente.premium}.Si tiene alg√∫n inconveniente con el pago, no dude en comunicarse con nuestro departamento de servicio al cliente al 1.855.963.6900. ¬°Disfrute los beneficios de su plan de salud!
                Esto es una prueba del salto de linea y del mensaje'''

                # Simulaci√≥n de env√≠o de mensaje
                #print(f"Simulando env√≠o de SMS a {clientSmsPayment.phone_number}: {message}")
                sendIndividualsSms(
                    obmaCliente.agent.assigned_phone.phone_number,
                    clientSmsPayment.phone_number,
                    obmaCliente.agent,
                    obmaCliente.company,
                    message
                )

                # Log para verificar el env√≠o
                print(f"Mensaje enviado al numero {clientSmsPayment.phone_number} - {clientSmsPayment.first_name} {clientSmsPayment.last_name}")
                logger.info(f"Mensaje enviado al numero {clientSmsPayment.phone_number} - {clientSmsPayment.first_name} {clientSmsPayment.last_name}")

        else:
            print(f"Cliente {selectedAgent} no tiene n√∫mero registrado para enviar SMS.")
            print(f'Al cliente {clientSmsPayment.first_name} {clientSmsPayment.last_name} - {clientSmsPayment.phone_number} No se le mando mensaje de cumplea√±o') 

